(include "./variables.yuck")
(defvar control-anim false)

(defwidget wifi []
  (eventbox
    :onclick "sh -c `../scripts/control-center ; ../scripts/alacritty iwctl`"
    (box
      :class "wifi"
      :orientation "h"
      :space-evenly false
      (image :class "icon wifi-icon" :path wifi-icon :image-width "24" :image-height "24")
      (label :text wifi-essid))))

(defwidget bluetooth []
  (eventbox
    :onclick "sh -c `../scripts/control-center ; ../scripts/alacritty bluetoothctl`"
    (box
      :class "bluetooth"
      :orientation "h"
      :space-evenly false
      (image :class "icon bt-icon" :path "../images/bluetooth.svg" :image-width "24" :image-height "24")
      (label :text "bluetoothctl"))))

(defwidget volume-scale []
  (box
    :class "volume-scale"
    :orientation "h"
    :vexpand true
    (scale
      :flipped true
      :orientation "v"
      :value vol-num
      :draw-value false
      :min 0
      :max 101
      :onchange "pamixer --set-volume {}")))

(defwidget volume-widget []
  (box
    :class "volume"
    :orientation "v"
    :space-evenly false
    (label :text "${vol-num}%")
    (volume-scale)
    (image :class "icon vol-icon" :path vol-icon :image-width "24" :image-height "24")))

(defwidget brightness-scale []
  (box
    :class "brightness-scale"
    :orientation "h"
    :vexpand true
    (scale
      :flipped true
      :orientation "v"
      :value br
      :draw-value false
      :min 0
      :max 101
      :onchange "brillo -S {} ; ${br-change}")))

(defwidget brightness-widget []
  (box
    :class "brightness"
    :orientation "v"
    :space-evenly false
    (label :text "${br}%")
    (brightness-scale)
    (image :class "icon br-icon" :path "../images/brightness.svg" :image-width "24" :image-height "24")))

(defwidget controls []
  (box
    :class "control-controls"
    :orientation "v"
    (wifi)
    (bluetooth)))

(defwidget sliders []
  (box
    :class "sliders"
    :orientation "h"
    (volume-widget)
    (brightness-widget)))

(defwidget top-section []
  (box
    :class "top"
    :orientation "h"
    :space-evenly true
    (controls)
    (sliders)))

(defwidget mid-section []
  (box
    :class "mid"
    :spacing 0
    :space-evenly true
    :vexpand false
    :hexpand false
    (box
      :orientation "v"
      :class "circle"
      (circular-progress
        :class "circular-progress"
        :value cpu
        :start-at 75
        :thickness 12
        :clockwise true
        (image :class "icon-circle ram-icon-circle" :path "../images/cpu.svg" :image-width "50" :image-height "50" :tooltip cpu)))
    (box
      :orientation "v"
      :class "circle"
      (circular-progress
        :class "circular-progress"
        :value mem
        :start-at 75
        :thickness 12
        :clockwise true
        (image :class "icon-circle ram-icon-circle" :path "../images/ram.svg" :image-width "50" :image-height "50" :tooltip mem)))
    (box
      :orientation "v"
      :class "circle"
      (circular-progress
        :class "circular-progress"
        :value bat-num
        :start-at 75
        :thickness 12
        :clockwise true
        (image :class "icon-circle bat-icon-circle" :path bat-icon :image-width "50" :image-height "50" :tooltip bat-lvl)))))

(defwidget player []
  (box
    :class "player"
    :style 'background-image: url("${art}")'
    :hexpand true
    (box
      :class "player-overlay"
      :spacing 0
      :space-evenly false
      :vexpand true
      :hexpand true
      (box :class "album" :style 'background-image: url("${album}")' (label :text " "))
      (label :halign "center" :text playing))))

(defwidget player-controls []
  (box
    :class "player-controls"
    :orientation "v"
    :limit-width 25
    (eventbox
      :onclick "playerctl previous"
      (image :class "icon prev-icon" :path "../images/previous.svg" :image-width "30" :image-height "30"))
    (eventbox
      :onclick "playerctl play-pause"
      (image :class "icon play-icon" :path "../images/play-pause.svg" :image-width "30" :image-height "30"))
    (eventbox
      :onclick "playerctl next"
      (image :class "icon next-icon" :path "../images/next.svg" :image-width "30" :image-height "30"))
    (eventbox
      :onclick "playerctl shuffle toggle"
      (image :class "icon shuffle-icon" :path "../images/shuffle.svg" :image-width "30" :image-height "30"))))

(defwidget end-section []
  (box
    :space-evenly false
    :class "end"
    :orientation "h"
    (player)
    (player-controls)))

(defwidget control-center []
  (centerbox
    :class "control-center"
    :orientation "v"
    :space-evenly false
    (top-section)
    (mid-section)
    (end-section)))

(defwidget main []
  (box
    :class "main"
    (revealer
      :transition "slidedown"
      :reveal control-anim
      :duration "250ms"
      (control-center))))

(defwindow control-center
  :monitor "0"
  :namespace "control-center"
  :geometry (geometry
              :x "8px"
              :y "8px"
              :width "400px"
              :height "0px"
              :anchor "top right")
  (main))
